Не нужно делать что-то супер-сложное, на данном этапе нужно сделать минимально
работающую версию того что было показано в задании. Опишу что сделал я:

1. Создал общий html для окошка корзины:

```
<div class="basket hidden">
	<div class="basketRow basketHeader">
		<div>Название товара</div>
		<div>Количество</div>
		<div>Цена за шт.</div>
		<div>Итого</div>
	</div>

	<div class="basketTotal">
		Товаров в корзине на сумму:
		$<span class="basketTotalValue">0</span>
	</div>
</div>
```

Вставил эту разметку после тега `<span class="cartIconWrap">`.

2. Добавил немного стилей, чтоб лучше смотрелось:

```
.rightHeader {
    position: relative;
}

.basket {
    position: absolute;
    z-index: 3;
    right: 0;
    top: 37px;
    background: white;
    padding: 10px;
    border: 1px solid #ebebeb;
    border-radius: 3px;
    font-size: 14px;
}

@media (min-width: 340px) {
    .basket {
        font-size: 16px;
    }
}
@media (min-width: 552px) {
    .basket {
        width: 500px;
    }
}

.basketRow {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    margin-bottom: 10px;
    border-bottom: 1px solid #ebebeb;
    padding-bottom: 10px;
}

.basketHeader {
    font-weight: bold;
}

.basketTotal {
    font-weight: bold;
    text-align: right;
}
```

Можно вставить (чтоб сохранить порядок) после стиля `.cartIconWrap span`.

3. Изменил немного html у самих товаров, каждому товару добавил data-атрибуты
с id, ценой и названием товара, пример:

```
<div class="featuredItem" data-id="1" data-name="ELLERY X M'O CAPSULE" data-price="52">
```

Можно было этого и не делать, можно было искать все нужные значения внутри
верстки товара, но верстка часто может меняться и постоянно при изменении
верстки править js не хочется, поэтому все данные о товаре вынесли выше, в
тег-обертку для товара.
Каждой кнопке добавления товара поставил класс addToCart (для упрощения жизни).
Также немного переименовал товары, чтоб у них были разные названия и поменял
цены, чтоб они также отличались.

4. Создал отдельный basket.js файл, подключил в html. Далее работа будет только
в данном js-файле.

5. Поставил в js обработчик на открытие/закрытие окна корзины (ставлю/снимаю)
класс hidden у элемента с классом basket при клике на элемент с классом
cartIconWrap.

6. Создал пустой объект, который в памяти страницы будет хранить добавленные
товары:

```
/**
 * В корзине хранится количество каждого товара
 * Ключ это id продукта, значение это товар в корзине - объект, содержащий
 * id, название товара, цену, и количество штук, например:
 * {
 *    1: {id: 1, name: "product 1", price: 30, count: 2},
 *    3: {id: 3, name: "product 3", price: 25, count: 1},
 * }
 */
const basket = {};
```

7. Далее надо сделать так, чтоб при клике на кнопки "Добавить в корзину"
(в макете "Add to cart"), мы могли обработать добавление в корзину данных.
Для этого я делегировал событие, повесил один обработчик события клика на
ближайшего общего предка всех кнопок, это элемент с классом featuredItems.
Внутри обработчика надо проверить, если мы кликнули не по тому элементу, по
которому нужно было (по кнопке добавить в корзину), то просто возвращаюсь из
функции.

Если клик был по нужному элементу (по "кнопке"), тогда получаю у родителя с
классом featuredItem данные из data-атрибутов, которые ставили в п.3. И вызываю
созданную мной функцию addToCart, в которой происходит добавление продукта.

8. Функция addToCart должна:
8.1. В объект basket добавить новый продукт или изменить имеющийся.
8.2. В html отрисовать новое количество добавленных товаров у значка корзины.
8.3. Отрисовать новую общую стоимость товаров в корзине.
8.4. Отрисовать правильно строку в окне корзины, в которой записаны все данные
о товаре.

Все. Последний 8 пункт не стал детально излагать. Сделайте так, как считаете
нужным. Удаление товаров можно не делать, главное сделать то что есть в задании.
Удачи!